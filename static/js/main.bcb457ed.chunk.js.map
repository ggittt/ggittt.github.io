{"version":3,"sources":["utils/data.ts","components/NewColumn.tsx","components/NewTask.tsx","ui/ModalWrap.tsx","utils/text.ts","components/Comment.tsx","components/NewComment.tsx","components/Comments.tsx","components/TaskModal.tsx","components/Task.tsx","components/Column.tsx","utils/localStorage.ts","components/Board.tsx","components/Header.tsx","components/SignUpModal.tsx","App.tsx","index.tsx"],"names":["generateId","Date","now","Math","floor","random","toString","CustomButton","styled","div","WrapButtons","Wrap","NewColumn","setColumns","useState","newEdit","setNewEdit","tempTitle","setTempTitle","Form","Control","onChange","value","target","placeholder","type","autoFocus","onClick","oldColumns","id","title","Button","variant","NewTask","setTasks","columnId","author","useContext","BoardContext","oldTasks","description","ModalWrap","show","children","handleClose","Modal","onHide","Body","capitalize","text","charAt","toUpperCase","slice","Text","Comment","setComments","commentId","tempText","setTempText","edit","setEdit","Label","column","sm","className","as","defaultValue","saveComment","Comments","deleteComment","NewComment","taskId","oldComments","arrComments","map","comment","TaskModal","setOnTaskModal","columnTitle","deleteTask","genNewTasks","tempDescription","setTempDescription","handleOnBlur","data","Header","closeButton","plaintext","onKeyUp","e","preventDefault","key","currentTarget","blur","onBlur","Buttons","Icons","Title","Task","comments","onEdit","setOnEdit","onTaskModal","setArrComments","useMemo","acc","Object","keys","forEach","commentsId","push","handleTaskModal","rows","length","ListTasks","Column","tasks","onEditTitle","setOnEditTitle","saveTitle","CloseButton","deleteColumn","LSSetColumns","localStorage","setItem","JSON","stringify","LSSetTasks","LSSetComments","React","createContext","Board","userName","columns","useEffect","LSUser","getItem","parse","LSGetColumns","LSGetTasks","LSGetComments","Provider","Support","Navbar","bg","fixed","Container","Brand","href","Toggle","Collapse","SignUpModal","handleSignUp","buttonDisabled","setButtonDisabled","setUserName","onSubmit","Row","Group","validUserName","name","disabled","App","initialColumns","initialTasks","initialComments","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bcb457ed.chunk.js","sourcesContent":["export const generateId = (): string => {\r\n  return (Date.now() + Math.floor(Math.random() * 100)).toString()\r\n}","import React, { FC, useState, } from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport styled from 'styled-components'\r\nimport { ColumnsType } from '../types/types';\r\nimport { generateId } from '../utils/data';\r\n\r\ntype PropsNewColumn = {\r\n  setColumns: (a: {}) => void\r\n}\r\nconst NewColumn: FC<PropsNewColumn> = ({ setColumns }) => {\r\n  const [newEdit, setNewEdit] = useState(false)\r\n  const [tempTitle, setTempTitle] = useState<any>('')\r\n\r\n  const handleOnChange = ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTempTitle(value)\r\n  };\r\n\r\n  const addNewColumn = () => {\r\n    setColumns((oldColumns: ColumnsType) => {\r\n      const id = generateId()\r\n      return { ...oldColumns, [id]: { id, title: tempTitle } }\r\n    })\r\n    setTempTitle('')\r\n    setNewEdit(false)\r\n  }\r\n  return (\r\n    <>\r\n      {\r\n        newEdit\r\n          ? <Wrap>\r\n            <Form.Control\r\n              onChange={handleOnChange}\r\n              placeholder='Title'\r\n              type='text'\r\n              autoFocus\r\n            />\r\n            <WrapButtons>\r\n              <CustomButton onClick={() => { tempTitle && addNewColumn() }} >Save</CustomButton>\r\n              <CustomButton onClick={() => { setNewEdit(false) }} >Cancel</CustomButton>\r\n            </WrapButtons>\r\n          </Wrap>\r\n          : <Button variant=\"secondary\" onClick={() => { setNewEdit(true) }} >Add another list</Button>\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\n\r\nconst CustomButton = styled.div`\r\nmargin:3px;\r\nwidth:60px;\r\npadding:5px;\r\nborder: none;\r\nbackground-color:var( --border-color);\r\ncursor: pointer;\r\nborder-radius:5px;\r\n`\r\nconst WrapButtons = styled.div`\r\ndisplay: flex;\r\n`\r\nconst Wrap = styled.div`\r\nwidth:260px\r\n`\r\n\r\nexport default NewColumn;\r\n","import React, { FC, useContext, useState, } from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport styled from 'styled-components'\r\nimport { TasksType } from '../types/types';\r\nimport { generateId } from '../utils/data';\r\nimport { BoardContext } from './Board';\r\n\r\ntype PropsNewTask = {\r\n  setTasks: (a: {}) => void\r\n  columnId: string\r\n\r\n}\r\nconst NewTask: FC<PropsNewTask> = ({ setTasks, columnId, }) => {\r\n  const [newEdit, setNewEdit] = useState(false)\r\n  const [tempTitle, setTempTitle] = useState<any>('')\r\n\r\n  const { author } = useContext(BoardContext)\r\n\r\n  const handleOnChange = ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTempTitle(value)\r\n  };\r\n\r\n  const addNewTask = () => {\r\n    setTasks((oldTasks: TasksType) => {\r\n      const id = generateId()\r\n      return {\r\n        ...oldTasks,\r\n        [id]: { id, title: tempTitle, columnId: columnId, description: '', author: author }\r\n      }\r\n    })\r\n    setTempTitle('')\r\n    setNewEdit(false)\r\n  }\r\n  return (\r\n    <Wrap>\r\n      {\r\n        newEdit\r\n          ? <>\r\n            <Form.Control\r\n              onChange={handleOnChange}\r\n              placeholder='Title'\r\n              type='text'\r\n              autoFocus\r\n            />\r\n            <WrapButtons>\r\n              <CustomButton onClick={() => { tempTitle && addNewTask() }} >Save</CustomButton>\r\n              <CustomButton onClick={() => { setNewEdit(false) }} >Cancel</CustomButton>\r\n            </WrapButtons>\r\n          </>\r\n          : <Button variant=\"secondary\" onClick={() => { setNewEdit(true) }} >Add another list</Button>\r\n      }\r\n\r\n    </Wrap>\r\n  );\r\n}\r\n\r\n\r\nconst CustomButton = styled.div`\r\nmargin:3px;\r\nwidth:60px;\r\npadding:5px;\r\nborder: none;\r\nbackground-color:var( --border-color);\r\ncursor: pointer;\r\nborder-radius:5px;\r\n`\r\nconst WrapButtons = styled.div`\r\ndisplay: flex;\r\n`\r\nconst Wrap = styled.div`\r\npadding:10px;\r\nwidth:260px\r\n`\r\n\r\nexport default NewTask;\r\n","import React, { FC } from 'react'\r\nimport { Modal } from 'react-bootstrap'\r\n\r\ntype PropsModalWrap = {\r\n  handleClose?: () => void\r\n  show: boolean\r\n  children: React.ReactNode\r\n\r\n\r\n}\r\nconst ModalWrap: FC<PropsModalWrap> = ({ show, children, handleClose }) => {\r\n\r\n  return (\r\n    <>\r\n      <Modal show={show} onHide={handleClose} >\r\n        <Modal.Body >{children}</Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ModalWrap","export const validUserName = (userName: string): boolean => {\r\n  if (userName.length >= 2 && userName.length < 10) {\r\n    return true\r\n  }\r\n  return false\r\n}\r\n\r\nexport const capitalize = (text: string): string => {\r\n  return text.charAt(0).toUpperCase() + text.slice(1);\r\n}","import React, { FC, useState } from 'react'\r\nimport { Form } from 'react-bootstrap'\r\nimport styled from 'styled-components'\r\nimport { CommentsType } from '../types/types';\r\nimport { capitalize } from '../utils/text';\r\n\r\ntype PropComments = {\r\n  author: string\r\n  text: string\r\n  commentId: string\r\n  setComments: (a: {}) => void\r\n}\r\nconst Comment: FC<PropComments> = ({ author, text, setComments, commentId }) => {\r\n  const [tempText, setTempText] = useState<any>(text)\r\n  const [edit, setEdit] = useState(false)\r\n\r\n\r\n  const saveComment = (commentId: string) => {\r\n    setEdit(false)\r\n    setComments((oldColumns: CommentsType) => {\r\n      return { ...oldColumns, [commentId]: { ...oldColumns[commentId], text: tempText } }\r\n    })\r\n  };\r\n  const deleteComment = (commentId: string) => {\r\n    setComments((Comments: CommentsType) => {\r\n      delete Comments[commentId]\r\n      return { ...Comments }\r\n    })\r\n  };\r\n  const handleOnChange = ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTempText(value)\r\n  };\r\n  return (\r\n    <Wrap>\r\n      <Form>\r\n        <Form.Label column sm=\"2\">\r\n          {capitalize(author)}\r\n        </Form.Label>\r\n        {!edit\r\n          ? <Text> {text}</Text>\r\n          : <Form.Control\r\n            className=\"mb-3\"\r\n            as=\"textarea\"\r\n            placeholder=\"Comment\"\r\n            onChange={handleOnChange}\r\n            defaultValue={text}\r\n            autoFocus\r\n          />}\r\n        <WrapButtons>\r\n          {edit\r\n            ? <>\r\n              <CustomButton onClick={() => { saveComment(commentId) }} >Save</CustomButton>\r\n              <CustomButton onClick={() => {\r\n                setEdit(false)\r\n                setTempText('')\r\n              }} >Cancel</CustomButton>\r\n            </>\r\n            : <CustomButton onClick={() => { setEdit(true) }} >Edit</CustomButton>}\r\n          <CustomButton onClick={() => { deleteComment(commentId) }} >Delete</CustomButton>\r\n        </WrapButtons>\r\n      </Form>\r\n    </Wrap>\r\n  );\r\n}\r\n\r\nconst CustomButton = styled.div`\r\nmargin:3px;\r\nwidth:60px;\r\npadding:5px;\r\nborder: none;\r\nbackground-color:var( --border-color);\r\ncursor: pointer;\r\nborder-radius:5px;\r\n`\r\nconst WrapButtons = styled.div`\r\ndisplay: flex;\r\n`\r\nconst Text = styled.div`\r\noverflow-wrap: break-word; \r\n`\r\nconst Wrap = styled.div`\r\nmargin-bottom:10px;\r\npadding:10px;\r\nborder-radius:5px;\r\nbackground-color:#e8e8e8\r\n`\r\n\r\nexport default Comment","import React, { FC, useState, } from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport styled from 'styled-components'\r\nimport { CommentsType } from '../types/types';\r\nimport { generateId } from '../utils/data';\r\n\r\ntype PropsNewComment = {\r\n  setComments: (a: {}) => void\r\n  taskId: string\r\n  author?: string\r\n}\r\nconst NewComment: FC<PropsNewComment> = ({ setComments, taskId, author }) => {\r\n  const [newEdit, setNewEdit] = useState(false)\r\n  const [tempText, setTempText] = useState<any>('')\r\n\r\n  const handleOnChange = ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTempText(value)\r\n  };\r\n\r\n  const addNewComment = () => {\r\n    setComments((oldComments: CommentsType) => {\r\n      const id = generateId()\r\n      return {\r\n        ...oldComments,\r\n        [id]: { id, title: tempText, taskId: taskId, text: tempText, author: author }\r\n      }\r\n    })\r\n    setTempText('')\r\n    setNewEdit(false)\r\n  }\r\n  return (\r\n    <Wrap>\r\n      {\r\n        newEdit\r\n          ? <>\r\n            <Form.Control\r\n              onChange={handleOnChange}\r\n              placeholder='New comments'\r\n              as=\"textarea\"\r\n              type='text'\r\n              className=\"mb-3\"\r\n              autoFocus\r\n            />\r\n            <WrapButtons>\r\n              <CustomButton onClick={() => { tempText && addNewComment() }} >Save</CustomButton>\r\n              <CustomButton onClick={() => { setNewEdit(false) }} >Cancel</CustomButton>\r\n            </WrapButtons>\r\n          </>\r\n          : <Button variant=\"secondary\" onClick={() => { setNewEdit(true) }} >Add another comment</Button>\r\n      }\r\n\r\n    </Wrap>\r\n  );\r\n}\r\n\r\n\r\nconst CustomButton = styled.div`\r\nmargin:3px;\r\nwidth:60px;\r\npadding:5px;\r\nborder: none;\r\nbackground-color:var( --border-color);\r\ncursor: pointer;\r\nborder-radius:5px;\r\n`\r\nconst WrapButtons = styled.div`\r\ndisplay: flex;\r\n`\r\nconst Wrap = styled.div`\r\npadding:10px;\r\n`\r\n\r\nexport default NewComment;\r\n","import React, { FC, useContext } from 'react'\r\nimport { CommentInterface } from '../types/types';\r\nimport { BoardContext } from './Board';\r\nimport Comment from './Comment';\r\nimport NewComment from './NewComment';\r\n\r\ntype PropComments = {\r\n  arrComments: []\r\n  taskId: string\r\n}\r\nconst Comments: FC<PropComments> = ({ arrComments, taskId }) => {\r\n  const { setComments, author } = useContext(BoardContext)\r\n\r\n  return (\r\n    <>\r\n      {arrComments.map((comment: CommentInterface) => (\r\n        <Comment\r\n          key={comment.id}\r\n          author={comment.author}\r\n          text={comment.text}\r\n          commentId={comment.id}\r\n          setComments={setComments}\r\n        />\r\n      ))}\r\n      <NewComment\r\n        taskId={taskId}\r\n        setComments={setComments}\r\n        author={author}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Comments","import React, { FC, KeyboardEvent, useState } from 'react'\r\nimport { Form, Modal, Button } from 'react-bootstrap'\r\nimport styled from 'styled-components'\r\nimport ModalWrap from '../ui/ModalWrap'\r\nimport Comments from './Comments'\r\n\r\ntype PropsTask = {\r\n  title: string\r\n  comments?: string\r\n  description?: string\r\n  author: string\r\n  columnTitle: string\r\n  show: boolean\r\n  taskId: string\r\n  arrComments: []\r\n  setOnTaskModal: (data: boolean) => void\r\n  deleteTask: (taskId: string) => void\r\n  genNewTasks: (taskId: string, data: string, type: string) => void\r\n\r\n}\r\nconst TaskModal: FC<PropsTask> = ({\r\n  title,\r\n  description,\r\n  author,\r\n  show,\r\n  setOnTaskModal,\r\n  columnTitle,\r\n  deleteTask,\r\n  taskId,\r\n  genNewTasks,\r\n  arrComments\r\n}) => {\r\n  const [tempTitle, setTempTitle] = useState('')\r\n  const [tempDescription, setTempDescription] = useState('')\r\n\r\n  const handleClose = () => setOnTaskModal(false);\r\n\r\n  const handleOnChangeTitle = ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTempTitle(value)\r\n  };\r\n  const handleOnChangeDescription = ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTempDescription(value)\r\n  };\r\n  const handleOnBlur = (taskId: string, data: string, type: string) => {\r\n    genNewTasks(taskId, data, type)\r\n  };\r\n\r\n  const handleKeyPress = (e: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\r\n    e.preventDefault()\r\n    if (e.key === 'Enter') {\r\n      e.currentTarget.blur()\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <ModalWrap show={show} handleClose={handleClose}>\r\n      <Modal.Header closeButton >\r\n        {/* <div>{title}</div> */}\r\n        <Form.Control\r\n          plaintext\r\n          className=\"mb-3\"\r\n          type=\"text\"\r\n          placeholder=\"Title\"\r\n          defaultValue={title}\r\n          onChange={handleOnChangeTitle}\r\n          onKeyUp={handleKeyPress}\r\n          onBlur={() => { handleOnBlur(taskId, tempTitle, 'title') }}\r\n        />\r\n      </Modal.Header>\r\n      <Form>\r\n        <Form.Label column sm=\"2\">\r\n          Description\r\n        </Form.Label>\r\n        <Form.Control\r\n          className=\"mb-3\"\r\n          as=\"textarea\"\r\n          placeholder=\"Description\"\r\n          onChange={handleOnChangeDescription}\r\n          defaultValue={description}\r\n          onBlur={() => { handleOnBlur(taskId, tempDescription, 'description') }} />\r\n      </Form>\r\n      <Comments arrComments={arrComments} taskId={taskId} />\r\n      <Text>Author: {author}. Column title: {columnTitle || 'no title'}</Text>\r\n      <Button onClick={() => { deleteTask(taskId) }}>Delete</Button>\r\n    </ModalWrap>\r\n  )\r\n}\r\n\r\n\r\nconst Text = styled.div`\r\noverflow-wrap: break-word; \r\n`\r\n\r\nexport default TaskModal","import React, { FC, useMemo, useState } from 'react'\r\nimport { Form } from 'react-bootstrap'\r\nimport styled from 'styled-components'\r\nimport { CommentInterface, CommentsType, TasksType } from '../types/types'\r\nimport TaskModal from './TaskModal'\r\n\r\ntype PropsTask = {\r\n  title: string\r\n  comments: CommentsType\r\n  description: string\r\n  author: string\r\n  setTasks: (a: {}) => void\r\n  taskId: string\r\n  columnTitle: string\r\n}\r\nconst Task: FC<PropsTask> = ({\r\n  title, comments, description, author, setTasks, taskId, columnTitle\r\n}) => {\r\n  const [tempTitle, setTempTitle] = useState(title)\r\n  const [onEdit, setOnEdit] = useState(false)\r\n  const [onTaskModal, setOnTaskModal] = useState(false)\r\n  const [arrComments, setArrComments] = useState<any>([])\r\n\r\n  useMemo(() => {\r\n    let acc: Array<CommentInterface> = []\r\n    Object.keys(comments).forEach(commentsId => {\r\n      comments[commentsId].taskId === taskId && acc.push(comments[commentsId])\r\n    })\r\n    setArrComments(acc)\r\n  }, [comments, taskId])\r\n\r\n\r\n  const handleOnChange = ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTempTitle(value)\r\n  };\r\n\r\n  const handleTaskModal = () => {\r\n    setOnTaskModal(!onTaskModal)\r\n  };\r\n  const genNewTasks = (taskId: string, data: string, type: string) => {\r\n    setOnEdit(false)\r\n\r\n    type === 'title'\r\n      && setTasks((oldTasks: TasksType) => { return { ...oldTasks, [taskId]: { ...oldTasks[taskId], title: data ? data : oldTasks[taskId].title } } })\r\n    type === 'description'\r\n      && setTasks((oldTasks: TasksType) => { return { ...oldTasks, [taskId]: { ...oldTasks[taskId], description: data } } })\r\n  };\r\n  const deleteTask = (taskId: string) => {\r\n    setTasks((oldTasks: TasksType) => {\r\n      delete oldTasks[taskId]\r\n      return { ...oldTasks }\r\n    })\r\n  };\r\n\r\n  return (\r\n    <Wrap >\r\n      <Header >\r\n        {onEdit\r\n          ? <><Form.Control className=\"mr-3\"\r\n            onChange={handleOnChange}\r\n            type='text'\r\n            defaultValue={title}\r\n            placeholder=\"Title\"\r\n            autoFocus\r\n            as=\"textarea\" rows={1}\r\n          />\r\n            <Icons><i className=\"bi bi-check-circle\"\r\n              onClick={() => { genNewTasks(taskId, tempTitle, 'title') }}></i></Icons></>\r\n          : <Title onClick={() => { handleTaskModal() }}>{title}</Title>\r\n        }\r\n        <Buttons>\r\n          <Icons><i className=\"bi bi-x-circle\"\r\n            onClick={() => { deleteTask(taskId) }} ></i></Icons>\r\n          <Icons><i className=\"bi bi-pen\"\r\n            onClick={() => { setOnEdit(!onEdit) }}></i></Icons>\r\n        </Buttons>\r\n      </Header>\r\n\r\n      {\r\n        comments &&\r\n        <div onClick={() => { handleTaskModal() }}>\r\n          {arrComments.length !== 0\r\n            && <div>{arrComments.length}< i className=\"bi bi-chat-dots\"></i></div>}\r\n        </div>\r\n      }\r\n      <TaskModal\r\n        show={onTaskModal}\r\n        title={title}\r\n        setOnTaskModal={setOnTaskModal}\r\n        description={description}\r\n        author={author}\r\n        columnTitle={columnTitle}\r\n        deleteTask={deleteTask}\r\n        taskId={taskId}\r\n        genNewTasks={genNewTasks}\r\n        arrComments={arrComments}\r\n      />\r\n    </Wrap >\r\n  )\r\n}\r\n\r\nconst Buttons = styled.div`\r\nopacity: 0;\r\n`\r\nconst Icons = styled.div`\r\nmargin-left: 2px;\r\n`\r\nconst Wrap = styled.div`\r\nmargin: 4px;\r\nwidth:260px;\r\npadding: 8px 5px 8px 5px;\r\nbox-sizing: border-box;\r\nbackground-color: #fff;\r\nborder-radius:5px;\r\nborder: 1px solid var(--border-color);\r\n&:hover ${Buttons} {\r\n  opacity: 1;\r\n}\r\n`\r\n\r\nconst Header = styled.div`\r\ndisplay: flex;\r\nflex-direction: row;\r\njustify-content: space-between;\r\npadding:5px;\r\n`\r\nconst Title = styled.div`\r\nmargin-top:7px;\r\nmargin-left:13px;\r\nwidth:100%;\r\noverflow-wrap: break-word;\r\nwhite-space: normal;\r\nword-break: break-word;\r\n `\r\n\r\n\r\nexport default Task","import React, { FC, KeyboardEvent, useState, } from 'react';\r\nimport { CloseButton, Form } from 'react-bootstrap';\r\nimport styled from 'styled-components'\r\nimport { ColumnsType, CommentsType, TasksType } from '../types/types';\r\nimport NewTask from './NewTask';\r\nimport Task from './Task';\r\n\r\ntype PropsColumn = {\r\n  title: string\r\n  setColumns: (a: {}) => void\r\n  tasks: TasksType\r\n  setTasks: (a: {}) => void\r\n  columnId: string\r\n  comments: CommentsType\r\n}\r\n\r\nconst Column: FC<PropsColumn> = ({ title, columnId, setColumns, tasks, setTasks, comments }) => {\r\n  const [onEditTitle, setOnEditTitle] = useState(false)\r\n  const [tempTitle, setTempTitle] = useState(title)\r\n\r\n  const handleClickTitle = () => {\r\n    setOnEditTitle(!onEditTitle)\r\n\r\n  };\r\n  const saveTitle = (columnId: string) => {\r\n    setOnEditTitle(false)\r\n    setColumns((oldColumns: ColumnsType) => {\r\n      return { ...oldColumns, [columnId]: { ...oldColumns[columnId], title: tempTitle } }\r\n    })\r\n  };\r\n  const handleOnChange = ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTempTitle(value)\r\n  };\r\n  const deleteColumn = (columnId: string) => {\r\n    setColumns((oldColumns: ColumnsType) => {\r\n      delete oldColumns[columnId]\r\n      return { ...oldColumns }\r\n    })\r\n  };\r\n\r\n  const handleKeyPress = (e: KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\r\n    e.preventDefault()\r\n    if (e.key === 'Enter') {\r\n      saveTitle(columnId)\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <Wrap>\r\n      <Header >\r\n        {onEditTitle\r\n          ? <Form.Control\r\n            onChange={handleOnChange}\r\n            placeholder='Title'\r\n            defaultValue={title}\r\n            type='text'\r\n            autoFocus\r\n            onKeyUp={handleKeyPress}\r\n            onBlur={() => { saveTitle(columnId) }}\r\n          />\r\n          : <Title onClick={handleClickTitle}>{\r\n            title.length === 0\r\n              ? 'Title'\r\n              : <Text>{title}</Text>}</Title>}\r\n\r\n        <CloseButton onClick={() => { deleteColumn(columnId) }} />\r\n      </Header>\r\n      <ListTasks>\r\n        {\r\n          Object.keys(tasks).map(taskId => {\r\n            if (tasks[taskId].columnId === columnId) {\r\n              return <Task\r\n                key={taskId}\r\n                setTasks={setTasks}\r\n                taskId={taskId}\r\n                title={tasks[taskId].title}\r\n                author={tasks[taskId].author}\r\n                columnTitle={title}\r\n                description={tasks[taskId].description}\r\n                comments={comments}\r\n              />\r\n            } return null\r\n          })\r\n        }\r\n\r\n      </ListTasks>\r\n      <NewTask\r\n        setTasks={setTasks}\r\n        columnId={columnId} />\r\n    </Wrap>\r\n  );\r\n}\r\n\r\nconst Wrap = styled.div`\r\nwidth: 272px;\r\nmargin: 0 4px;\r\nheight: 100%;\r\nbox-sizing: border-box;\r\ndisplay: inline-block;\r\nwhite-space: nowrap;\r\nbackground-color: #ebecf0;\r\nborder-radius:5px;\r\n    \r\n`\r\nconst Header = styled.div`\r\ndisplay: flex;\r\nflex-direction: row;\r\njustify-content: space-between;\r\npadding:5px;\r\nz-index: 2;\r\n`\r\nconst Title = styled.div`\r\ndisplay: flex;\r\nflex-direction: row;\r\njustify-content: space-between;\r\npadding:3px;\r\nmargin-top:4px;\r\n`\r\nconst Text = styled.div`\r\noverflow-wrap: break-word;\r\nwhite-space: normal;\r\nword-break: break-word;\r\n`\r\nconst ListTasks = styled.div`\r\nwidth:270px;\r\ndisplay: flex;\r\nalign-items: flex-start;\r\nflex-direction: column;\r\npadding: 1px;\r\n`\r\n\r\n\r\nexport default Column;\r\n","\r\nexport const LSGetUser = () => {\r\n  const LSUser = localStorage.getItem('userName')\r\n  return LSUser ? LSUser : ''\r\n}\r\nexport const LSSetUser = (data: string) => {\r\n  localStorage.setItem('userName', data)\r\n}\r\n\r\nexport const LSGetColumns = () => {\r\n  const LSUser = localStorage.getItem('columns')\r\n  return LSUser ? JSON.parse(LSUser) : []\r\n}\r\nexport const LSSetColumns = (data: object) => {\r\n  localStorage.setItem('columns', JSON.stringify(data))\r\n}\r\n\r\nexport const LSGetTasks = () => {\r\n  const LSUser = localStorage.getItem('tasks')\r\n  return LSUser ? JSON.parse(LSUser) : []\r\n}\r\nexport const LSSetTasks = (data: object) => {\r\n  localStorage.setItem('tasks', JSON.stringify(data))\r\n}\r\n\r\nexport const LSGetComments = () => {\r\n  const LSUser = localStorage.getItem('comments')\r\n  return LSUser ? JSON.parse(LSUser) : []\r\n}\r\nexport const LSSetComments = (data: object) => {\r\n  localStorage.setItem('comments', JSON.stringify(data))\r\n}","import React, { FC, useEffect, useState, Dispatch } from 'react';\r\nimport styled from 'styled-components'\r\nimport NewColumn from './NewColumn';\r\nimport Column from './Column';\r\nimport { LSGetColumns, LSGetComments, LSGetTasks, LSSetColumns, LSSetComments, LSSetTasks } from '../utils/localStorage';\r\n\r\nexport const BoardContext = React.createContext<{\r\n  setComments: Dispatch<any>\r\n  author: string\r\n}>({\r\n  setComments: () => { },\r\n  author: ''\r\n})\r\n\r\ntype PropsBoard = {\r\n  userName: string\r\n}\r\n\r\nconst Board: FC<PropsBoard> = ({ userName }) => {\r\n  const [columns, setColumns] = useState<any>({})\r\n  const [tasks, setTasks] = useState<any>({})\r\n  const [comments, setComments] = useState<any>({})\r\n\r\n  useEffect(() => {\r\n    setColumns(LSGetColumns())\r\n    setTasks(LSGetTasks())\r\n    setComments(LSGetComments())\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    LSSetColumns(columns)\r\n  }, [columns])\r\n  useEffect(() => {\r\n    LSSetTasks(tasks)\r\n  }, [tasks])\r\n  useEffect(() => {\r\n    LSSetComments(comments)\r\n  }, [comments])\r\n\r\n  return (\r\n    <BoardContext.Provider value={{ setComments, author: userName }}>\r\n      <Wrap className='board'>\r\n        {Object.keys(columns).map(id => {\r\n          return <Column key={id}\r\n            columnId={id}\r\n            title={columns[id].title}\r\n            setColumns={setColumns}\r\n            tasks={tasks}\r\n            setTasks={setTasks}\r\n            comments={comments} />\r\n        })}\r\n        <NewColumn\r\n          setColumns={setColumns} />\r\n      </Wrap>\r\n    </BoardContext.Provider>\r\n  );\r\n}\r\n\r\nconst Wrap = styled.div`\r\ndisplay: flex;\r\nalign-items: flex-start;\r\nwhite-space: nowrap;\r\npadding: 15px;\r\n`\r\n\r\nexport default Board;\r\n","import React, { FC } from 'react'\r\nimport { Navbar, Container } from 'react-bootstrap'\r\nimport styled from 'styled-components'\r\nimport { capitalize } from '../utils/text'\r\n\r\ntype PropsHeader = {\r\n  userName: string\r\n}\r\nconst Header: FC<PropsHeader> = ({ userName }) => {\r\n\r\n\r\n  return (\r\n    <>\r\n      <Navbar bg=\"primary\" variant=\"dark\" fixed=\"top\">\r\n        <Container>\r\n          <Navbar.Brand href=\"#home\">Kanban board</Navbar.Brand>\r\n          <Navbar.Toggle />\r\n          <Navbar.Collapse className=\"justify-content-end\">\r\n            <Navbar.Text>\r\n              Signed in as: {capitalize(userName)}\r\n            </Navbar.Text>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n      <Support />\r\n    </>\r\n  )\r\n}\r\nconst Support = styled.div`\r\nheight:50px\r\n`\r\n\r\n\r\nexport default Header","import React, { FC,  useState } from 'react'\r\nimport { Button, Form, Row } from 'react-bootstrap'\r\nimport ModalWrap from '../ui/ModalWrap';\r\nimport { validUserName } from '../utils/text';\r\n\r\ntype PropSignUpModal = {\r\n  show: boolean\r\n  handleSignUp: (userName: string) => void\r\n}\r\nconst SignUpModal: FC<PropSignUpModal> = ({ show, handleSignUp }) => {\r\n  const [buttonDisabled, setButtonDisabled] = useState(true)\r\n  const [userName, setUserName] = useState('')\r\n\r\n  const handleSubmit = (e: React.SyntheticEvent) => {\r\n    e.preventDefault();\r\n    handleSignUp(userName)\r\n  };\r\n  const handleOnChange = ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\r\n    setUserName(value)\r\n    setButtonDisabled(!validUserName(value))\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ModalWrap show={show} >\r\n        <Form onSubmit={handleSubmit}>\r\n          <Row className='mb-3'>\r\n            <Form.Group>\r\n              <Form.Control\r\n                onChange={handleOnChange}\r\n                name='userName'\r\n                type='text'\r\n                placeholder='Enter your username' />\r\n            </Form.Group>\r\n          </Row>\r\n          <Button\r\n            disabled={buttonDisabled}\r\n            type=\"submit\"\r\n            variant='primary'>\r\n            Create\r\n          </Button>\r\n        </Form>\r\n      </ModalWrap>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SignUpModal","import React, { useEffect, useState, } from 'react';\nimport Board from './components/Board';\nimport Header from './components/Header';\nimport SignUpModal from './components/SignUpModal';\nimport { LSGetUser, LSSetColumns, LSSetComments, LSSetTasks, LSSetUser } from './utils/localStorage';\nimport initialColumns from './assets/initial/initialColumns.json'\nimport initialTasks from './assets/initial/initialTasks.json'\nimport initialComments from './assets/initial/initialComments.json'\n\n\nfunction App() {\n  const [userName, setUserName] = useState('')\n\n  useEffect(() => {\n    setUserName(LSGetUser())\n  }, [userName])\n\n  const handleSignUp = (userName: string) => {\n    setUserName(userName)\n    LSSetUser(userName)\n    LSSetColumns(initialColumns)\n    LSSetTasks(initialTasks)\n    LSSetComments(initialComments)\n  }\n\n  return (\n    <div className=\"App\">\n      <SignUpModal\n        show={!userName}\n        handleSignUp={handleSignUp}\n      />\n      {userName &&\n        <>\n          <Header userName={userName} />\n          <Board userName={userName}/>\n        </>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport \"./styles/style.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}